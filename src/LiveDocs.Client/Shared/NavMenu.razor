@inject IDocumentationService _DocumentationService
@inject RemoteLiveDocsOptions _Configuration
@using LiveDocs.Shared.Services.Search
@using System.Threading.Tasks
<div class="fixed-top navbar-dark bg-dark mx-auto">
    <nav class="navbar navbar-expand-lg justify-content-center mx-auto">
        <a class="navbar-brand mr-auto mr-lg-0" href="">@_Configuration.ApplicationName</a>
        <button class="navbar-toggler p-0 border-0" type="button" data-toggle="offcanvas" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="navbar-collapse offcanvas-collapse @NavMenuCssClass" style="max-width:85rem;">
            <ul class="navbar-nav mr-auto">
                @if (_DocumentationService.DocumentationIndex != null)
                {
                    @if (_DocumentationService.DocumentationIndex.Projects.Count > 0)
                    {
                        <LiveDocs.Shared.Components.NavLinkDropdownItem Text="Documentation" BaseRoute="/">
                            @foreach (var item in _DocumentationService.DocumentationIndex.Projects.OrderBy(o => o.Name.ToLower()))
                            {
                                <NavLink class="dropdown-item" href="@(item.Key + "/")" @onclick="CloseNavMenu">@item.Name</NavLink>
                            }
                        </LiveDocs.Shared.Components.NavLinkDropdownItem>
                    }
                    else if (_DocumentationService.DocumentationIndex.DefaultProject.DefaultDocuments.Count > 0 && _DocumentationService.DocumentationIndex.DefaultProject.LandingPage != null)
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="@(_DocumentationService.DocumentationIndex.DefaultProject.DefaultDocuments.First().Key + "/")" Match="NavLinkMatch.Prefix">
                                Documentation
                            </NavLink>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="" Match="NavLinkMatch.Prefix">
                                Documentation
                            </NavLink>
                        </li>
                    }
                }
                @if (_Configuration.Navigation != null && _Configuration.Navigation.Header != null)
                {
                    @foreach (var element in _Configuration.Navigation.Header)
                    {
                        @if (element.SubElements != null)
                        {
                            <LiveDocs.Shared.Components.NavLinkDropdownItem Text="@element.Text" BaseRoute="@element.Url" NewTab="@element.NewTab">
                                @foreach (var subelement in element.SubElements)
                                {
                                    <NavLink class="dropdown-item" href="@(subelement.Url)" @onclick="CloseNavMenu" rel="noopener noreferrer">@subelement.Text</NavLink>
                                }
                            </LiveDocs.Shared.Components.NavLinkDropdownItem>
                        }
                        else
                        {
                            <li class="nav-item">
                                <NavLink class="nav-link" href="@element.Url" Match="NavLinkMatch.Prefix" target="@(element.NewTab ? "_blank" : "_self")">
                                    @element.Text
                                </NavLink>
                            </li>
                        }
                    }
                }
            </ul>
            @if (_Configuration.Search?.Enabled ?? false)
            {
                <div class="search-form form-inline my-2 my-lg-0 dropdown">
                    <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search" @bind="@SearchQuery" @bind:event="oninput" @onfocus="OnFocus" />
                    <div class="dropdown-menu " aria-labelledby="dropdown" style="width:99%;margin-top:0px">
                        @foreach (var item in documents)
                        {
                            int lastIndex = item.KeyPath.LastIndexOf("/");
                            <NavLink class="dropdown-item" href="@(item.KeyPath)">
                                @if (lastIndex > -1)
                                {
                                    <span class="text-muted mr-1">@(item.KeyPath.Substring(0, lastIndex))</span>
                                }
                                @item.Document.Name
                            </NavLink>
                        }
                    </div>
                </div>
            }
        </div>
    </nav>
</div>
@code {
    bool collapseNavMenu = false;

    string NavMenuCssClass => collapseNavMenu ? "open" : null;

    protected async override Task OnInitializedAsync()
    {
        while (_DocumentationService.DocumentationIndex == null)
            await Task.Delay(5);
    }

    void CloseNavMenu()
    {
        collapseNavMenu = false;
    }

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    string searchQuery;
    bool isSearching;
    System.Threading.CancellationTokenSource currentSearchCts;
    ISearchResult[] documents = new ISearchResult[0];
    bool noResults;

    string SearchQuery
    {
        get => searchQuery;
        set
        {
            searchQuery = value;
            if (!string.IsNullOrEmpty(searchQuery))
            {
                _ = SearchDebounced(searchQuery);
            }
            else documents = new ISearchResult[0];
        }
    }

    async Task SearchDebounced(string query)
    {
        try
        {
            // Cancel any existing pending search, and begin a new one
            noResults = false;
            currentSearchCts?.Cancel();
            currentSearchCts = new System.Threading.CancellationTokenSource();
            var cancellationToken = currentSearchCts.Token;

            await Task.Delay(500);
            if (!cancellationToken.IsCancellationRequested)
            {
                var results = await _DocumentationService.SearchIndex.Search(query, cancellationToken);
                if (!cancellationToken.IsCancellationRequested)
                {
                    documents = results.ToArray();
                    noResults = documents.Length == 0;
                    currentSearchCts = null;
                }
            }

            StateHasChanged();
        }
        catch (OperationCanceledException) { }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.StackTrace);
        }
    }

    async Task OnFocus()
    {
        await _DocumentationService.RefreshSearchIndex(_DocumentationService.DocumentationIndex);
    }
}