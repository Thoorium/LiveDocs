@page "/{path1?}/{path2?}/{path3?}/{path4?}/{path5?}/{path6?}/{path7?}/{path8?}/"
@inject IDocumentationService _DocumentationService
@inject Microsoft.JSInterop.IJSRuntime _JSRuntime
@inject NavigationManager _NavManager
@inject HttpClient _HttpClient
@inject RemoteConfiguration _Configuration

@if (!landingPage && currentProject != null && !noDocument)
{
    <div class="sidebar-toggles">
        <a class="btn btn-outline-info btn-sm @btnDisplayDocumentsListCssClass" @onclick="toggleDocumentsList">Documents List</a>
        <a class="btn btn-outline-info btn-sm @btnDisplayDocumentTreeCssClass @btnDisplayDocumentTreeDisabledCssClass" @onclick="toggleDocumentTree">Navigation Tree</a>
    </div>
}

<div class="content d-flex mx-auto pb-4">

    @if (!landingPage && currentProject != null && !noDocument)
    {
        <LiveDocs.Shared.Components.DocumentationSidebar Project="currentProject" DisplayToggle="displayDocumentsList" />
    }

    <div class="content px-4 align-self-stretch flex-lg-fill overflow-hidden @contentDisplayDocumentsListCssClass @contentDisplayDocumentTreeCssClass">
        @if (offline)
        {
            <LiveDocs.Shared.Components.Offline OnTryReload="OnTryReload" documentName="@(new[] { path1, path2, path3, path4, path5, path6, path7, path8 }.Where(w => !string.IsNullOrWhiteSpace(w)).LastOrDefault())" />
        }
        else if (notFound)
        {
            <LiveDocs.Shared.Components.DocumentNotFound documentName="@(new[] { path1, path2, path3, path4, path5, path6, path7, path8 }.Where(w => !string.IsNullOrWhiteSpace(w)).LastOrDefault())" />
        } else if (noDocument) {
            <LiveDocs.Shared.Components.NoDocumentFound />
        } else if (string.IsNullOrWhiteSpace(renderContent))
        {
            <div class="loading-document-wrapper mx-auto mt-4">
                <div class="loading-document mx-auto">
                    <img src="_content/LiveDocs.Shared/img/content.svg" onerror="this.onerror=null; this.src='_content/LiveDocs.Shared/img/content.png'">
                </div>
            </div>
        } else
        {
            if (!string.IsNullOrWhiteSpace(previousDocumentType))
            {
                <div class="bd-callout bd-callout-warning">
                    <p>No document of type <code>@previousDocumentType</code> found. Defaulting to <code>@documentType</code>.</p>
                </div>
            }
            if (!landingPage && extraDocuments?.Count > 1)
            {
                <div class="bd-callout bd-callout-info">
                    <p>There is multiple files for this document.</p>
                    <p>
                        @if (extraDocuments.Any(a => a.DocumentType == DocumentationDocumentType.Markdown))
                        {
                            <NavLink type="button" class="@($"btn btn-outline-info btn-sm mr-1 {(documentationDocument.DocumentType == DocumentationDocumentType.Markdown ? "active" : "")}")" href="@(UrlHelper.AddOrUpdateQueryString(relativePath,"file", "Markdown"))">Markdown</NavLink>
                        }
                        @if (extraDocuments.Any(a => a.DocumentType == DocumentationDocumentType.Html))
                        {
                            <NavLink type="button" class="@($"btn btn-outline-info btn-sm mr-1 {(documentationDocument.DocumentType == DocumentationDocumentType.Html ? "active" : "")}")" href="@(UrlHelper.AddOrUpdateQueryString(relativePath,"file", "Html"))">Html</NavLink>
                        }
                        @if (extraDocuments.Any(a => a.DocumentType == DocumentationDocumentType.Pdf))
                        {
                            <NavLink type="button" class="@($"btn btn-outline-info btn-sm mr-1 {(documentationDocument.DocumentType == DocumentationDocumentType.Pdf ? "active" : "")}")" href="@(UrlHelper.AddOrUpdateQueryString(relativePath,"file", "Pdf"))">Pdf</NavLink>
                        }
                        @if (extraDocuments.Any(a => a.DocumentType == DocumentationDocumentType.Word))
                        {
                            <NavLink type="button" class="@($"btn btn-outline-info btn-sm mr-1 {(documentationDocument.DocumentType == DocumentationDocumentType.Word ? "active" : "")}")" href="@(UrlHelper.AddOrUpdateQueryString(relativePath,"file", "Word"))">Word</NavLink>
                        }
                        @if (extraDocuments.Any(a => a.DocumentType == DocumentationDocumentType.Drawio))
                        {
                            <NavLink type="button" class="@($"btn btn-outline-info btn-sm mr-1 {(documentationDocument.DocumentType == DocumentationDocumentType.Drawio ? "active" : "")}")" href="@(UrlHelper.AddOrUpdateQueryString(relativePath,"file", "Drawio"))">Drawio</NavLink>
                        }
                        @if (extraDocuments.Any(a => a.DocumentType == DocumentationDocumentType.DrawioSvg))
                        {
                            <NavLink type="button" class="@($"btn btn-outline-info btn-sm mr-1 {(documentationDocument.DocumentType == DocumentationDocumentType.DrawioSvg ? "active" : "")}")" href="@(UrlHelper.AddOrUpdateQueryString(relativePath,"file", "DrawioSvg"))">DrawioSvg</NavLink>
                        }
                    </p>
                </div>
            }
            @if (!landingPage && _Configuration.Documents.ShowDownloadOriginal)
            {
                <div class="doc-tools"><a class="download-link float-right" href="@documentationDocument.Path" target="_blank" rel="noopener noreferrer" download>Download original</a></div>
            }

            @switch(documentationDocument.DocumentType)
            {
                case DocumentationDocumentType.Markdown:
                    <MarkdownDocument DocumentName="@documentationDocument.Name" Configuration="@_Configuration.Documents.Markdown">@((MarkupString)renderContent)</MarkdownDocument>
                    break;
                case DocumentationDocumentType.Html:
                    <HtmlDocument DocumentName="@documentationDocument.Name" Configuration="@_Configuration.Documents.Html">@((MarkupString)renderContent)</HtmlDocument>
                    break;
                case DocumentationDocumentType.Pdf:
                    <PdfDocument DocumentName="@documentationDocument.Name" Configuration="@_Configuration.Documents.Pdf">@((MarkupString)renderContent)</PdfDocument>
                    break;
                case DocumentationDocumentType.Word:
                    <WordDocument DocumentName="@documentationDocument.Name" Configuration="@_Configuration.Documents.Word">@((MarkupString)renderContent)</WordDocument>
                    break;
                case DocumentationDocumentType.Drawio:
                    <DrawioDiagram DocumentName="@documentationDocument.Name" Configuration="@_Configuration.Documents.Drawio">@((MarkupString)renderContent)</DrawioDiagram>
                    break;
                case DocumentationDocumentType.DrawioSvg:
                    <DrawioSvg DocumentName="@documentationDocument.Name" Configuration="@_Configuration.Documents.DrawioSvg">@((MarkupString)renderContent)</DrawioSvg>
                    break;
                default:
                    @((MarkupString)renderContent)
                    break;
            }
        }
    </div>
    @if (!landingPage && documentationDocument?.DocumentType == DocumentationDocumentType.Markdown && !noDocument && !offline)
    {
        <LiveDocs.Shared.Components.DocumentTree Document="documentationDocument" DisplayToggle="displayDocumentTree" />
    }
</div>

@code {
    [Parameter]
    public string path1 { get; set; }

    [Parameter]
    public string path2 { get; set; }

    [Parameter]
    public string path3 { get; set; }

    [Parameter]
    public string path4 { get; set; }

    [Parameter]
    public string path5 { get; set; }

    [Parameter]
    public string path6 { get; set; }

    [Parameter]
    public string path7 { get; set; }

    [Parameter]
    public string path8 { get; set; }

    private string renderContent = "";

    private bool loadNewContent = false;

    private string relativePath = "";

    private bool displayDocumentsList = false;

    private bool displayDocumentTree = false;

    // The current document.
    private IRemoteDocumentationDocument documentationDocument = null;

    // The current document type.
    private string documentType = "";

    // The previous, non-existing, document type.
    private string previousDocumentType = "";

    // Flag to remove the PreviousDocumentType message on the next render.
    private bool removePreviousDocumentType = false;

    // Current document is not found.
    private bool notFound = false;

    // No document has been found for the current project.
    private bool noDocument = false;

    // The client is disconnected from the server or has no network connection
    private bool offline = false;

    // Is the current page the landing page.
    private bool landingPage = false;

    private IDocumentationProject currentProject = null;

    private IList<IRemoteDocumentationDocument> extraDocuments = null;

    private string contentDisplayDocumentsListCssClass => displayDocumentsList ? "documents-open" : "";

    private string btnDisplayDocumentsListCssClass => displayDocumentsList ? "active" : "";

    private string contentDisplayDocumentTreeCssClass => displayDocumentTree ? "document-tree-open" : "";

    private string btnDisplayDocumentTreeCssClass => displayDocumentTree ? "active" : "";

    private string btnDisplayDocumentTreeDisabledCssClass => documentationDocument?.DocumentType == DocumentationDocumentType.Markdown && !offline ? "" : "disabled";

    private void toggleDocumentsList()
    {
        displayDocumentTree = false;
        displayDocumentsList = !displayDocumentsList;
    }

    private void toggleDocumentTree()
    {
        if (documentationDocument?.DocumentType == DocumentationDocumentType.Markdown && !offline)
        {
            displayDocumentsList = false;
            displayDocumentTree = !displayDocumentTree;
        }
    }

    private async Task ScrollTo(string id)
    {
        await _JSRuntime.InvokeAsync<bool>("scrollToElementId", new[] { id });
    }

    private async Task SetDocumentTitle(string title)
    {
        await _JSRuntime.InvokeVoidAsync("setDocumentTitle", $"{title} | {_Configuration.ApplicationName}");
    }

    private async Task OnTryReload()
    {
        offline = false;
        loadNewContent = true;
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        while (_DocumentationService.DocumentationIndex == null)
            await Task.Delay(5);

        _NavManager.LocationChanged += HandleLocationChanged;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!loadNewContent)
            return;

        if (removePreviousDocumentType && !string.IsNullOrWhiteSpace(previousDocumentType))
        {
            previousDocumentType = "";
            removePreviousDocumentType = false;
        }

        loadNewContent = false;
        relativePath = _NavManager.ToBaseRelativePath(_NavManager.Uri);
        IRemoteDocumentationDocument document = null;

        bool hasDocumentType = _NavManager.TryGetQueryString("file", out documentType);

        var isProjectFound = await _DocumentationService.DocumentationIndex.GetProjectFor(new[] { path1, path2, path3, path4, path5, path6, path7, path8 }, out currentProject, out string[] documentPath);

        if (documentPath.Length == 0)
        {
            document = (IRemoteDocumentationDocument)currentProject.LandingPage;

            if (document == null)
            {
                if (hasDocumentType)
                    document = (IRemoteDocumentationDocument) await currentProject.GetDocumentationDefaultDocument(documentType);
                else document = (IRemoteDocumentationDocument) await currentProject.GetDocumentationDefaultDocument();
            } else landingPage = true;

        }
        // Document type is specified.
        else if (hasDocumentType)
            document = (IRemoteDocumentationDocument) await currentProject.GetDocumentFor(documentPath, documentType);

        // Document type is not specified and the specified type had no document, let's find the default document instead.
        if (document == null)
        {
            previousDocumentType = documentType;

            if (documentPath.Length == 0)
                document = (IRemoteDocumentationDocument) await currentProject.GetDocumentationDefaultDocument();
            else document = (IRemoteDocumentationDocument) await currentProject.GetDocumentFor(documentPath);

            if (document == null)
            {
                if (documentPath.Length == 0)
                {
                    var firstAvailableDocumentPath = await currentProject.GetFirstAvailableDocumentPath();
                    if (firstAvailableDocumentPath != null)
                        _NavManager.NavigateTo(firstAvailableDocumentPath);
                    else
                    {
                        await SetDocumentTitle("No document found");
                        noDocument = true;
                    }
                } else if (document == null)
                {
                    notFound = true;
                    previousDocumentType = "";
                    await SetDocumentTitle("Not found");
                }
                
                StateHasChanged();
                return;
            }
        }

        // The document type was specified and the document was found.
        if (document != null)
        {
            documentType = document.DocumentType.ToString();
            documentationDocument = document;

            var cacheSuccess = await documentationDocument.TryCache();
            if(!cacheSuccess)
            {
                offline = true;
                renderContent = "";
                StateHasChanged();
                return;
            }

            renderContent = await documentationDocument.ToHtml(currentProject, _NavManager.Uri);

            // Look for extra documents
            if (documentPath.Length == 0)
                extraDocuments = (await currentProject.GetDocumentsFor(new[] { document.Key })).Select(s => ((IRemoteDocumentationDocument)s)).ToList();
            else extraDocuments = (await currentProject.GetDocumentsFor(documentPath)).Select(s => ((IRemoteDocumentationDocument)s)).ToList();

            await SetDocumentTitle(await document.GetTitle());
            StateHasChanged();
            removePreviousDocumentType = true;

            // If there's a # parameter specified, let's scroll to it.
            string urlId = UrlHelper.GetUrlId(relativePath);
            if (!string.IsNullOrWhiteSpace(urlId))
                await ScrollTo(urlId);

            return;
        }

        renderContent = "Document not found";
        StateHasChanged();

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnParametersSetAsync()
    {
        // This enables the loading screen in-between documents but only for the first time, potentially due to the document cache.
        // For big documents, not having a loading screen is an issue as there is a "render" lag.
        renderContent = "";
        loadNewContent = true;
        notFound = false;
        noDocument = false;
        offline = false;
        landingPage = false;
        displayDocumentsList = false;
        displayDocumentTree = false;
        return base.OnParametersSetAsync();
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        // If the event is throw by a # parameter being appended, we want to scroll to it.
        // Also compare the current url with the previous one to allow inter-document navigation with an id.
        string urlId = UrlHelper.GetUrlId(e.Location);
        string cleanUrl = _NavManager.ToBaseRelativePath(e.Location).Replace($"#{urlId}", "");
        if (!string.IsNullOrWhiteSpace(urlId) && relativePath == cleanUrl)
        {
            loadNewContent = false;

            // Do not call .Wait() here, it is blocking.
            ScrollTo(urlId);
        } else
        {
            // We went to a new page, let's load it.
            loadNewContent = true;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _NavManager.LocationChanged -= HandleLocationChanged;
    }
}
