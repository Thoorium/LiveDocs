@page "/docs/{path1?}/{path2?}/{path3?}/{path4?}/{path5?}/{path6?}/{path7?}/{path8?}/"
@inject MarkdownPipeline _MarkdownPipeline
@inject Microsoft.Extensions.Options.IOptions<LiveDocs.WebApp.Options.LiveDocsOptions> _Options
@inject LiveDocs.WebApp.Services.IDocumentationService _DocumentationService

<div class="sidebar">
    <ul class="nav flex-column">
        @*<li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                    <span class="oi oi-plus" aria-hidden="true"></span> Counter
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="fetchdata">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
                </NavLink>
            </li>*@
        @foreach (var item in _DocumentationService.DocumentationIndex.Documents.Where(w => w.DocumentType == Services.DocumentationDocumentType.Markdown))
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="@("docs/" + System.Net.WebUtility.UrlEncode(item.Path))">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> @System.IO.Path.GetFileNameWithoutExtension(item.Path)
                </NavLink>
            </li>
        }
    </ul>
</div>

<div class="content px-4 align-self-stretch flex-lg-fill">
    @if (string.IsNullOrWhiteSpace(renderContent))
    {
        <div class="ph-item">
            <div class="ph-col-12">
                <div class="ph-picture"></div>
                <div class="ph-row">
                    <div class="ph-col-6 big"></div>
                    <div class="ph-col-4 empty big"></div>
                    <div class="ph-col-2 big"></div>
                    <div class="ph-col-4"></div>
                    <div class="ph-col-8 empty"></div>
                    <div class="ph-col-6"></div>
                    <div class="ph-col-6 empty"></div>
                    <div class="ph-col-12"></div>
                </div>
            </div>
        </div>
    } else @((MarkupString)renderContent)
</div>
<div class="sidebar">
    <ul class="nav flex-column">
        @*<li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                    <span class="oi oi-plus" aria-hidden="true"></span> Counter
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="fetchdata">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
                </NavLink>
            </li>*@
        @foreach (var item in System.IO.Directory.EnumerateFiles(_Options.Value.DocumentationFolder, "*.md"))
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="@("docs/" + System.Net.WebUtility.UrlEncode(item.Replace(_Options.Value.DocumentationFolder + "\\","")))">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> @System.IO.Path.GetFileNameWithoutExtension(item)
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public string path1 { get; set; }

    [Parameter]
    public string path2 { get; set; }

    [Parameter]
    public string path3 { get; set; }

    [Parameter]
    public string path4 { get; set; }

    [Parameter]
    public string path5 { get; set; }

    [Parameter]
    public string path6 { get; set; }

    [Parameter]
    public string path7 { get; set; }

    [Parameter]
    public string path8 { get; set; }

    private string renderContent = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (!firstRender)
        //    return;

        //await Task.Delay(1500);
        if (string.IsNullOrWhiteSpace(path1))
            renderContent = Markdown.ToHtml(System.IO.File.ReadAllText(@"C:\Users\oli_2\Projects\LiveDocs\tests\docs\complex.md"), _MarkdownPipeline);
        else
        {
            renderContent = Markdown.ToHtml(System.IO.File.ReadAllText(System.IO.Path.Combine(_Options.Value.DocumentationFolder, System.Net.WebUtility.UrlDecode(path1))));
        }
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }
}