@page "/docs/{path1?}/{path2?}/{path3?}/{path4?}/{path5?}/{path6?}/{path7?}/{path8?}/"
@inject MarkdownPipeline _MarkdownPipeline
@inject Microsoft.Extensions.Options.IOptions<LiveDocs.WebApp.Options.LiveDocsOptions> _Options
@inject LiveDocs.Shared.Services.IDocumentationService _DocumentationService

<div class="content d-flex mx-auto">

    <LiveDocs.Shared.Components.DocumentationSidebar></LiveDocs.Shared.Components.DocumentationSidebar>

    <div class="content px-4 align-self-stretch flex-lg-fill">
        @if (string.IsNullOrWhiteSpace(renderContent))
        {
            <div class="ph-item">
                <div class="ph-col-12">
                    <div class="ph-picture"></div>
                    <div class="ph-row">
                        <div class="ph-col-6 big"></div>
                        <div class="ph-col-4 empty big"></div>
                        <div class="ph-col-2 big"></div>
                        <div class="ph-col-4"></div>
                        <div class="ph-col-8 empty"></div>
                        <div class="ph-col-6"></div>
                        <div class="ph-col-6 empty"></div>
                        <div class="ph-col-12"></div>
                    </div>
                </div>
            </div>
        } else
        {
            <div class="bd-callout bd-callout-info">
                <p>There is multiple files for this document.</p>
                <p>
                    <button type="button" class="btn btn-info btn-sm">Markdown</button>
                    <button type="button" class="btn btn-outline-info btn-sm">Html</button>
                    <button type="button" class="btn btn-outline-info btn-sm">PDF</button>
                </p>
            </div>
            @((MarkupString)renderContent)
        }
    </div>
    <LiveDocs.Shared.Components.DocumentSidebar Document="documentationDocument"></LiveDocs.Shared.Components.DocumentSidebar>
</div>

@code {
    [Parameter]
    public string path1 { get; set; }

    [Parameter]
    public string path2 { get; set; }

    [Parameter]
    public string path3 { get; set; }

    [Parameter]
    public string path4 { get; set; }

    [Parameter]
    public string path5 { get; set; }

    [Parameter]
    public string path6 { get; set; }

    [Parameter]
    public string path7 { get; set; }

    [Parameter]
    public string path8 { get; set; }

    private string renderContent = "";

    private bool loadNewContent = false;

    private LiveDocs.Shared.Services.IDocumentationDocument documentationDocument = new LiveDocs.WebApp.Services.DocumentationDocument();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!loadNewContent)
            return;

        if (string.IsNullOrWhiteSpace(path1))
            renderContent = "";
        else
        {
            var d = _DocumentationService.DocumentationIndex.Documents.Where(w => w.Key == path1);
            if (d.Any())
            {
                documentationDocument = d.First();
                var mddoc = Markdown.Parse(System.IO.File.ReadAllText(System.IO.Path.Combine(_Options.Value.DocumentationFolder, documentationDocument.Path)));
                renderContent = Markdown.ToHtml(System.IO.File.ReadAllText(System.IO.Path.Combine(_Options.Value.DocumentationFolder, documentationDocument.Path)));
            } else
                renderContent = "Document not found";
        }
        StateHasChanged();
        loadNewContent = false;
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnParametersSetAsync()
    {
        loadNewContent = true;
        return base.OnParametersSetAsync();
    }
}
