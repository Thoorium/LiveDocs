@page "/docs/{path1?}/{path2?}/{path3?}/{path4?}/{path5?}/{path6?}/{path7?}/{path8?}/"
@inject Markdig.MarkdownPipeline _MarkdownPipeline
@inject Microsoft.Extensions.Options.IOptions<LiveDocs.WebApp.Options.LiveDocsOptions> _Options
@inject LiveDocs.Shared.Services.IDocumentationService _DocumentationService
@inject NavigationManager _NavManager

<div class="content d-flex mx-auto">

    <LiveDocs.Shared.Components.DocumentationSidebar></LiveDocs.Shared.Components.DocumentationSidebar>

    <div class="content px-4 align-self-stretch flex-lg-fill">
        @if (notFound == true)
        {
            <LiveDocs.Shared.Components.DocumentNotFound documentName="@(new[] { path1, path2, path3, path4, path5, path6, path7, path8 }.Where(w => !string.IsNullOrWhiteSpace(w)).Last())"></LiveDocs.Shared.Components.DocumentNotFound>
        } else if (string.IsNullOrWhiteSpace(renderContent))
        {
            <div class="loading-document-wrapper mx-auto mt-4">
                <div class="loading-document mx-auto">
                    <img src="img/building.svg" onerror="this.onerror=null; this.src='image.png'">
                </div>
            </div>
        } else
        {
            if (!string.IsNullOrWhiteSpace(previousDocumentType))
            {
                <div class="bd-callout bd-callout-warning">
                    <p>No document of type <code>@previousDocumentType</code> found. Defaulting to <code>@documentType</code>.</p>
                </div>
            }
            if (extraDocuments != null && extraDocuments.Count > 1)
            {
                <div class="bd-callout bd-callout-info">
                    <p>There is multiple files for this document.</p>
                    <p>
                        @if (extraDocuments.Any(a => a.DocumentType == LiveDocs.Shared.Services.DocumentationDocumentType.Markdown))
                        {
                            <NavLink type="button" class="btn btn-outline-info btn-sm" href="@(AddOrUpdateQueryString(relativePath,"file", "Markdown"))">Markdown</NavLink>
                        }
                        @if (extraDocuments.Any(a => a.DocumentType == LiveDocs.Shared.Services.DocumentationDocumentType.Html))
                        {
                            <NavLink type="button" class="btn btn-outline-info btn-sm" href="@(AddOrUpdateQueryString(relativePath,"file", "Html"))">Html</NavLink>
                        }
                        @if (extraDocuments.Any(a => a.DocumentType == LiveDocs.Shared.Services.DocumentationDocumentType.Pdf))
                        {
                            <NavLink type="button" class="btn btn-outline-info btn-sm" href="@(AddOrUpdateQueryString(relativePath,"file", "Pdf"))">Pdf</NavLink>
                        }
                    </p>
                </div>
            }
            @((MarkupString)renderContent)
        }
    </div>
    @if (documentationDocument != null && documentationDocument.DocumentType == LiveDocs.Shared.Services.DocumentationDocumentType.Markdown)
    {
        <LiveDocs.Shared.Components.DocumentTree MarkdownDocument="markdownDocument"></LiveDocs.Shared.Components.DocumentTree>
    }
</div>

@code {
        [Parameter]
        public string path1 { get; set; }

        [Parameter]
        public string path2 { get; set; }

        [Parameter]
        public string path3 { get; set; }

        [Parameter]
        public string path4 { get; set; }

        [Parameter]
        public string path5 { get; set; }

        [Parameter]
        public string path6 { get; set; }

        [Parameter]
        public string path7 { get; set; }

        [Parameter]
        public string path8 { get; set; }

    private string renderContent = "";

    private bool loadNewContent = false;

    private string relativePath = "";

    private LiveDocs.Shared.Services.IDocumentationDocument documentationDocument = null;
    private Markdig.Syntax.MarkdownDocument markdownDocument = null;
    private string documentType = "";
    private string previousDocumentType = "";
    private bool removePreviousDocumentType = false;
    private bool notFound = false;

    private IList<LiveDocs.Shared.Services.IDocumentationDocument> extraDocuments = null;

    private string AddOrUpdateQueryString(string url, string name, string value)
    {
        var urlQueryRegex = System.Text.RegularExpressions.Regex.Match(url, "\\?(.*)$");
        string urlQuery = "";

        if (urlQueryRegex.Success)
            urlQuery = urlQueryRegex.Groups[1].Value;

        var queries = System.Web.HttpUtility.ParseQueryString(urlQuery);

        queries[name] = value;

        string path = url.Substring(0, url.IndexOf("?") > 0 ? url.IndexOf("?") : url.Length);
        string query = "?";

        for (int i = 0; i < queries.Count; i++)
        {
            if (i > 0)
                query += "&";
            string key = queries.Keys[i];
            query += $"{key}={queries[key]}";
        }

        return path + query;
    }

    protected async override Task OnInitializedAsync()
    {
        _NavManager.LocationChanged += HandleLocationChanged;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!loadNewContent)
            return;

        if (removePreviousDocumentType && !string.IsNullOrWhiteSpace(previousDocumentType))
        {
            previousDocumentType = "";
            removePreviousDocumentType = false;
        }

        loadNewContent = false;
        if (string.IsNullOrWhiteSpace(path1))
            path1 = "readme";
        
        relativePath = _NavManager.ToBaseRelativePath(_NavManager.Uri);
        var uri = new Uri(relativePath, UriKind.Relative);

        LiveDocs.Shared.Services.IDocumentationDocument document = null;

        bool hasDocumentType = _NavManager.TryGetQueryString("file", out documentType);

        // Document type is specified.
        if (hasDocumentType)
            document = await _DocumentationService.GetDocumentFor(new[] { path1, path2, path3, path4, path5, path6, path7, path8 }, documentType);

        // Document type is not specified or the specified type had no document, let's find the default document instead.
        if (!hasDocumentType || document == null)
        {
            if (document == null)
                previousDocumentType = documentType;

            document = await _DocumentationService.GetDocumentFor(new[] { path1, path2, path3, path4, path5, path6, path7, path8 });

            if (document == null)
            {
                if (path1 != "readme")
                    notFound = true;
                previousDocumentType = "";
                StateHasChanged();
            } else
                _NavManager.NavigateTo(AddOrUpdateQueryString(relativePath, "file", document.DocumentType.ToString()));
            return;
        }

        // The document type was specified and the document was found.
        if (hasDocumentType && document != null)
        {
            documentType = document.DocumentType.ToString();
            documentationDocument = document;

            markdownDocument = Markdown.Parse(System.IO.File.ReadAllText(documentationDocument.Path), _MarkdownPipeline);
            renderContent = await markdownDocument.ToHtml(_NavManager.Uri);

            // Look for extra documents
            extraDocuments = await _DocumentationService.GetDocumentsFor(path1);

            StateHasChanged();
            removePreviousDocumentType = true;
            return;
        }

        // The document type was not specified but a default document was found.
        // The document type was specified, a document for this type was not found but a default document was found.
        if (!hasDocumentType && document != null)
        {
            _NavManager.NavigateTo(AddOrUpdateQueryString(relativePath, "file", document.DocumentType.ToString()));
            return;
        }

        renderContent = "Document not found";
        StateHasChanged();        

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnParametersSetAsync()
    {
        loadNewContent = true;
        notFound = false;
        return base.OnParametersSetAsync();
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        //GetQueryStringValues();
        loadNewContent = true;
        StateHasChanged();
    }

    public void Dispose()
    {
        _NavManager.LocationChanged -= HandleLocationChanged;
    }
}
