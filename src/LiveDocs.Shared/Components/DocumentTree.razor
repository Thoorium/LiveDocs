@inject LiveDocs.Shared.Services.IDocumentationService _DocumentationService

@if (documentTree.Count != 0)
{
    <div class="sidebar tree">
        <ul class="nav flex-column document-tree text-secondary">
            @if (Document == null)
            {
                @("Loading")
            } else
            {
                @for (int i = 0; i < documentTree.Count; i++)
                {
                    <DocumentTreeItem Text="@documentTree[i].HeaderText" Url="@documentTree[i].HeaderLink" Level="@documentTree[i].HeaderLevel"></DocumentTreeItem>
                }
            }
        </ul>
    </div>
}

@code {
    [Parameter]
    public LiveDocs.Shared.Services.IDocumentationDocument Document { get; set; }

    private LiveDocs.Shared.Services.IDocumentationDocument previousDocument = null;
    private List<LiveDocs.Shared.Services.Documents.DocumentTreeItem> documentTree = new List<Services.Documents.DocumentTreeItem>();

    protected async override Task OnParametersSetAsync()
    {
        if (previousDocument == Document)
        {
            await base.OnParametersSetAsync();
            return;
        }
            

        previousDocument = Document;
        documentTree.Clear();

        if(Document is LiveDocs.Shared.Services.Remote.IRemoteDocumentationDocument remoteDocument)
        {
            var success = await remoteDocument.TryCache();
            if(!success)
                return;

            documentTree.AddRange(await remoteDocument.GetDocumentTree());
        }
        await base.OnParametersSetAsync();
    }
}